#!/usr/bin/env python3

import json
import sys
from subprocess import check_call
from urllib.parse import urlparse

import psycopg2


def conn_str():
    with open('/opt/mattermost/config/config.json', 'r') as f:
        conf = json.load(f)
        urlstr = conf.get('SqlSettings', {}).get('DataSource')
        if not urlstr:
            raise Exception('database not configured')
        url = urlparse(urlstr)
        if not url.scheme.startswith('postgres'):
            raise Exception('unsupported database: %s', url.scheme)
        return 'dbname=%s user=%s password=%s host=%s port=%s' % (
            url.path.lstrip('/'), url.username, url.password,
            url.hostname, url.port)


def channels_per_team(c):
    with c.cursor() as cur:
        cur.execute('SELECT COUNT(1), teams.name FROM channels JOIN teams ON (channels.teamid = teams.id) GROUP BY teams.name')
        return cur.fetchall()


def sessions_per_user(c):
    with c.cursor() as cur:
        cur.execute('SELECT COUNT(1), username FROM sessions JOIN users ON (sessions.userid = users.id) GROUP BY username')
        return cur.fetchall()


def team_count(c):
    with c.cursor() as cur:
        cur.execute('SELECT COUNT(1) FROM teams')
        n, = cur.fetchone()
        return n


def user_count(c):
    with c.cursor() as cur:
        cur.execute('SELECT COUNT(1) FROM users')
        n, = cur.fetchone()
        return n


def posts_per_user(c):
    with c.cursor() as cur:
        cur.execute('SELECT COUNT(1), username FROM posts JOIN users ON (posts.userid = users.id) GROUP BY username')
        return cur.fetchall()


if __name__ == '__main__':
    dburi = conn_str()
    with psycopg2.connect(dburi) as conn:
        check_call(['add-metric', 'users=%d' % (user_count(conn))])
        check_call(['add-metric', 'teams=%d' % (team_count(conn))])

        ppu = posts_per_user(conn)
        total_posts = 0
        for n, username in ppu:
            check_call(['add-metric', '--labels', 'user=%s' % (username), 'posts=%d' % (n)])
            total_posts += n
        check_call(['add-metric', 'posts=%d' % (total_posts)])

        spu = sessions_per_user(conn)
        total_sesh = 0
        for n, username in spu:
            check_call(['add-metric', '--labels', 'user=%s' % (username), 'sessions=%d' % (n)])
            total_sesh += n
        check_call(['add-metric', 'sessions=%d' % (total_sesh)])

        cpt = channels_per_team(conn)
        total_chan = 0
        for n, teamname in cpt:
            check_call(['add-metric', '--labels', 'team=%s' % (teamname), 'channels=%d' % (n)])
            total_chan += n
        check_call(['add-metric', 'channels=%d' % (total_chan)])
