#!/usr/bin/env python3
#
# Copyright 2016 Casey Marshall
# Copyright 2017 Ghent University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import json
import socket
import time
import unittest
from subprocess import check_call, check_output


class TestDeployment(unittest.TestCase):
    def setUp(self):
        check_call(['juju', 'deploy', 'cs:~cmars/mattermost'])
        check_call(['juju', 'deploy', 'postgresql'])
        check_call(['juju', 'add-relation', 'mattermost', 'postgresql:db'])
        wait_for('mattermost')

    def test_something_is_listening(self):
        out = check_output(['juju', 'status', '--format', 'json'], universal_newlines=True)
        juju_status = json.loads(out)
        mattermost_info = [x for x in juju_status.get('services', {}).get('mattermost', {}).get('units', {}).values()]
        if not mattermost_info:
            raise Exception("missing mattermost service unit")
        addr = mattermost_info[0]['public-address']
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((addr, 8065))


def wait_for(svc, req_status='active', timeout=900):
    for i in range(0, timeout, 5):
        out = check_output(['juju', 'status', '--format', 'json'], universal_newlines=True)
        juju_status = json.loads(out)
        svc_status = juju_status.get('services', {}).get(svc, {}).get('service-status', {}).get('current')
        if svc_status == req_status:
            return
        time.sleep(5)
    raise Exception("timeout waiting for %s to reach %s status" % (svc, req_status))


if __name__ == '__main__':
    unittest.main()
